# # # # # # # # # # # # # # # #
# ########################### #
# # PROCESSING TROLL OUTPUT # #
# ########################### #
# # # # # # # # # # # # # # # #

#####################################
# STEP 1: Move the data off the CRC #
#####################################
# Navigate to the TROLL directory on your personal computer, and set up a
# directory, or series of directories, for storing the output files you
# wish to analyze.

$ cd /Users/yourname/Documents/GradSchool/TROLL/
$ mkdir output
$ cd output

# Use the scp command to copy your data from remote to local. You will need
# to enter your NetID and CRC password. Your command will differ slightly
# from what is shown here, but will be similar. Change what appears after
# the * to determine what output files will be copied.

$ scp sparker3@crcfe02.crc.nd.edu:/afs/crc.nd.edu/user/s/sparker3/Private/Medvigy_Lab/TROLL/output/*outputs.txt .

####################################################
# STEP 2: Convert tab-separated to comma-separated #
####################################################
# This is an easy step, but important for saving you headaches down the road.
# This script will convert every file in a directory from tab-separated to
# comma-separated. Be sure your directories do not contain anything you do
# not want converted.

$ sed -i "" 's/\t/,/g' /Users/yourname/Documents/GradSchool/TROLL/output/*

# You may want to convert everything in multiple subdirectories. For example,
# you may have ../output/species1 and ../output/species2. To convert the
# contents of all subdirectories, add another *

$ sed -i "" 's/\t/,/g' /Users/yourname/Documents/GradSchool/TROLL/output/*/*

###################################
# STEP 3: Loading the data into R #
###################################
# If you want to simply look at a single output file, read.csv() is perfectly
# sufficient. I have set up this section in hopes of making it easier to work
# with large ensembles of runs. I have broken this and the following section
# down by output type.

# # # # # # # # # # # # # #
# Liana induced mortality #
# # # # # # # # # # # # # #
# All mortality except negative NPP must be turned OFF for this analysis.
# We will analyze from_data.txt files

# Model parameters
num_tree <- 1 # Enter the number of tree species modeled
num_liana <- 1 # Enter the number of liana species modeled
num_sp <- num_tree + num_liana
num_steps <- 120 # Enter the number of months modeled
num_ens <- 500 # Enter the number of realizations in each ensemble
# Load in species data from modified TROLL input file (species table only, comma separated)
species_info <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/species_table.txt", header = TRUE)

# For this analysis, you will initialize a batch of jobs where the same liana is attached
# to the same tree via forestconfig.txt.
# Here we will look at tree species 1 and liana species 45.
# This script is easily altered to include more than 1 species of tree and liana.
# Tree: Alvaradoa amarphoides (ALAM)
# Liana: Mimosa tenuifolia (MITE)

# Read in tree
ALAM <- list()
for (j in 1:num_ens) {
  # check that file isn't blank (tree died in 1st timestep)
  if (file.size(paste0("/Users/yourname/Documents/GradSchool/TROLL/Mortality/ALAM:MITE/ens_",j,"_0_tree_from_data.txt"))>0)
  {
    # import each run
    ALAM[[j]] <- read.csv(paste0("/Users/yourname/Documents/GradSchool/TROLL/Mortality/ALAM:MITE/ens_",j,"_0_tree_from_data.txt"), 
                              header = FALSE)
    # creating add columns
    colnames(ALAM[[j]]) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
    ALAM[[j]]$month <- seq.int(nrow(ALAM[[j]]))
    ALAM[[j]]$run <- j
  }
  # if file is blank, generate matrix of 0s
  else {ALAM[[j]] <-  data.frame(matrix(data = 0, nrow = 1, ncol = 6))
  colnames(ALAM[[j]]) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
  ALAM[[j]]$month <- seq.int(nrow(ALAM[[j]]))
  ALAM[[j]]$run <- j
  }
}

# And it's liana
MITE_ALAM <- list()
for (j in 1:num_ens) {
  # check that file isn't blank (liana died in 1st timestep)
  if (file.size(paste0(""/Users/yourname/Documents/GradSchool/TROLL/Mortality/ALAM:MITE/ens_",j,"_0_liana_from_data.txt"))>0)
  {
    # import each run
    MITE_ALAM[[j]] <- read.csv(paste0("/Users/yourname/Documents/GradSchool/TROLL/Mortality/ALAM:MITE/ens_",j,"_0_liana_from_data.txt""), 
                               header = FALSE)
    # creating add columns
    colnames(MITE_ALAM[[j]]) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
    MITE_ALAM[[j]]$month <- seq.int(nrow(MITE_ALAM[[j]]))
    MITE_ALAM[[j]]$run <- j
  }
  # if file is blank, generate matrix of 0s
  else {MITE_ALAM[[j]] <-  data.frame(matrix(data = 0, nrow = 1, ncol = 6))
  colnames(MITE_ALAM[[j]]) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
  MITE_ALAM[[j]]$month <- seq.int(nrow(MITE_ALAM[[j]]))
  MITE_ALAM[[j]]$run <- j
  }
}

# Generate matrix to store info on months survived
df <- matrix(ncol = num_tree, nrow = num_ens)

# Populate matrix
for (k in 1:num_ens) {
  df[k,1] <- length(ALAM[[k]]$month)
  }
  
# Add species names
names(df) <- species_info[1:num_tree,1]

# Calculate death rate out of 500 (%)
death_rate <- c()
for (k in 1:num_tree) {
  death_rate[k] <- (500-tail(table(df[,k]),1))/5
}

# Subset species_info for species-specific traits
fg <- species_info[c(1:num_tree),]
fg <- subset(fg, select = -c(dmax,tmax,Fregdistgr,g1,s_liana))

# Add death rate to species info
fg$death_rate <- death_rate

# Calculate SLA, Vcmax, and Rdark
fg$SLA <- 10000/fg$LMA
Vcmax <- c()
Rdark <- c()
Rdarkm <- c()
for (i in 1:num_tree) {
Vcmax[i] <- 10^min(-1.56+0.43*log10(fg$Nmass[i]*1000.0)+0.37*log10(fg$SLA[i]),-0.80+0.45*log10(fg$Pmass[i]*1000.0)+0.25*log10(fg$SLA[i]))
Rdark[i] <- fg$LMA[i]*(8.5341-130.6*fg$Nmass[i]-567.0*fg$Pmass[i]-0.0137*fg$LMA[i]+11.1*Vcmax[i]+187600.0*fg$Nmass[i]*fg$Pmass[i])*0.001
Rdarkm[i] <- 8.5341-130.6*fg$Nmass[i]-567.0*fg$Pmass[i]-0.0137*fg$LMA[i]+11.1*Vcmax[i]+187600.0*fg$Nmass[i]*fg$Pmass[i]*0.001
}
fg$Vcmax <- Vcmax
fg$Rdark <- Rdark
fg$Rdarkm <- Rdarkm

# fg is ready for regression analysis

# # # # # # # # # # # #
# Canopy architecture #
# # # # # # # # # # # #
# TROLL outputs 2 comma separated files ending in liana_canopy_arc.txt and
# tree_canopy_arc.txt. These contain information on plants initialized from data.

library('dplyr')

num_ens <- 1 # Enter the number of runs in the ensemble
num_steps <- 120 # Enter the number of months modeled

# Read in an ensemble of canopy_arc.txt files
ens_liana <- list()
for (j in 1:num_ens) {
  # check that file isn't blank (liana died in 1st timestep)
  if (file.size(paste0("/Users/yourname/Documents/GradSchool/TROLL/canopy_arc/growth_strat/ens_",j,"_0_liana_canopy_arc.txt"))>0)
  {
    # import each run
    ens_liana[[j]] <- read.csv(paste0("/Users/yourname/Documents/GradSchool/TROLL/canopy_arc/growth_strat/ens_",j,"_0_liana_canopy_arc.txt"), 
                               header = FALSE)
    # creating add columns
    colnames(ens_liana[[j]]) <- c("month","layer","LA")
    ens_liana[[j]]$run <- j
  }
  # if file is blank, generate matrix of 0s
  else {ens_liana[[j]] <-  data.frame(matrix(data = 0, nrow = 1, ncol = 3))
  colnames(ens_liana[[j]]) <- c("month","layer","LA")
  ens_liana[[j]]$run <- j
  }
}
# SKIP NEXT STEP IF SINGLE RUN (num_ens = 1)
# Group by month and layer if ensemble. 
ens_liana <- bind_rows(ens_liana) %>% group_by(month, layer) %>% 
  summarize(across(c(LA),list(mu = ~ mean(.), sigma = ~ std.error(.), n = ~ length(.))))

# As dataframe
liana <- as.data.frame(ens_liana)

# Define the dimensions of your canopy. 
canopy <- array(dim = c(max(liana$layer+1),4,num_steps))

# Here the canopy width is set to 4 because my canopy depth was 3. 
# This was done for a pretty visualization. The canopy_arc.txt
# files only have LA by vertical layer, not horizontal.

# Read LA by layer by month into a 3D array 
for (i in 1:num_steps) {
  month <- which(liana$month == i)
  canopy[liana$layer[month]+1, ,i] <-liana$LA[month]
}

# You are ready to visualize

#################################
# STEP 4: Visualize and analyze #
#################################
# # # # # # # # # # # # # #
# Liana induced mortality #
# # # # # # # # # # # # # #
# We can use linear regression to determine which species-specific traits
# control the ability of lianas to kill their hosts

library('car')
library('ggplot2')

# It may be useful to only look at instances where death_rate > 0
fg <- subset(fg, death_rate > 0)

# If log transforming, do this before modeling
fg$LMA <- log(fg$LMA)    # etc...

# Play with the regression variables to find the best fit.
model1 <- lm(data = fg, death_rate ~ LMA + Pmass + wsg)

# You can visualize with added variable plots
avPlots(model1)

# As well as look at the residuals
res <- qplot(fitted(model1), resid(model1))
res+geom_hline(yintercept=0)+theme_classic()

# # # # # # # # # # # #
# Canopy architecture #
# # # # # # # # # # # #
# We can visualize how each of the different growth strategies distributes leaf
# area vertically in the canopy.

library('plot.matrix')
library('magick')

num_ens <- 1 # Enter the number of runs in the ensemble
num_steps <- 120 # Enter the number of months modeled

## Simple plot of a 1 month snapshot (month 100)
# Reverse when plotting so layer 1 is on the bottom.
# Change nrow = and ncol = to match the dimensions of canopy[x,y,]
plot(matrix(nrow = 3, ncol = 4, rev(canopy[ , ,100])), ylab = "Canopy layer by meter", 
     xlab = NA, asp = T, axis.row = NULL, axis.col = NULL, main = "LA by canopy layer", 
     border = NA, key=list(side=4, cex.axis=0.75), fmt.key="%.4f",
     # Adjust breaks as needed for proper visualization
     breaks=c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5,1e-4,1e-3,1e-2,.1,.5))
# Adjust axis ticks to match data
axis(2, at = c(.5,1.5,2.5,3.5), labels = c(0,1,2,3))
mtext(side = 3, "month 100")

## Animated .gif of LAD change by vertical layer over time
# Set your working directory
setwd("/Users/yourname/Documents/GradSchool/TROLL/canopy_arc/growth_strat/images")

# Loop over canopy, generate and save a .png image of each timestep
for (i in 1:num_steps)  {
  par(mar = c(5.1, 4.1, 4.1, 3.1))
  
  png(paste0(file = "growth_strat_",i,".png"),width = 6, height = 4, res = 300, units = "in")
  
  plot(matrix(nrow = 3, ncol = 4, rev(canopy[ , ,i])), ylab = "Canopy layer by meter", 
     xlab = NA, asp = T, axis.row = NULL, axis.col = NULL, main = "LA by canopy layer", 
     border = NA, key=list(side=4, cex.axis=0.75), fmt.key="%.4f",
     # Adjust breaks as needed for proper visualization
     breaks=c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5,1e-4,1e-3,1e-2,.1,.5))
  # Adjust axis ticks to match data
  axis(2, at = c(.5,1.5,2.5,3.5),labels = c(0,1,2,3))
  
  mtext(side = 3, paste0("month ",i))
  
  dev.off()
}

# List file names and read in
imgs <- list.files(getwd(), full.names = T)
img_list <- lapply(imgs, image_read)

# Join the images together
img_joined <- image_join(img_list)

# Animate at 2 frames per second
img_animated <- image_animate(img_joined, fps = 2)

# View animated image
img_animated

# Save to disk
image_write(image = img_animated,
            path = "growth_strat.gif")

