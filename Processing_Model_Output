# # # # # # # # # # # # # # # #
# ########################### #
# # PROCESSING TROLL OUTPUT # #
# ########################### #
# # # # # # # # # # # # # # # #

#####################################
# STEP 1: Move the data off the CRC #
#####################################
# Navigate to the TROLL directory on your personal computer, and set up a
# directory, or series of directories, for storing the output files you
# wish to analyze.

$ cd /Users/yourname/Documents/GradSchool/TROLL/
$ mkdir output
$ cd output

# Use the scp command to copy your data from remote to local. You will need
# to enter your NetID and CRC password. Your command will differ slightly
# from what is shown here, but will be similar. Change what appears after
# the * to determine what output files will be copied. Useful output files
# are shown.

$ scp NetID@epycfe.crc.nd.edu:/afs/crc.nd.edu/user/s/sparker3/Private/Medvigy_Lab/TROLL/output/*outputs.txt .
$ scp NetID@epycfe.crc.nd.edu:/afs/crc.nd.edu/user/s/sparker3/Private/Medvigy_Lab/TROLL/output/*from_data.txt .
$ scp NetID@epycfe.crc.nd.edu:/afs/crc.nd.edu/user/s/sparker3/Private/Medvigy_Lab/TROLL/output/*canopy_arc.txt .

####################################################
# STEP 2: Convert tab-separated to comma-separated #
####################################################
# This is an easy step, but important for saving you headaches down the road.
# This script will convert every file in a directory from tab-separated to
# comma-separated. Be sure your directories do not contain anything you do
# not want converted.

$ sed -i "" 's/\t/,/g' /Users/yourname/Documents/GradSchool/TROLL/output/*

# You may want to convert everything in multiple subdirectories. For example,
# you may have ../output/species1 and ../output/species2. To convert the
# contents of all subdirectories, add another *

$ sed -i "" 's/\t/,/g' /Users/yourname/Documents/GradSchool/TROLL/output/*/*

#################################
# STEP 3: Looking at data in  R #
#################################
# Begin by defining variables to help your workflow. Change these as needed

num_tree <- 38 # Enter the number of tree species modeled
num_liana <- 8 # Enter the number of liana species modeled
num_sp <- num_tree + num_liana
num_steps <- 120 # Enter the number of months modeled
num_ens <- 500 # Enter the number of realizations in each ensemble
# Load in species data from modified TROLL input file (species table only, comma separated)
species_info <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/species_table.txt", header = TRUE)

# # # # # # # # #
# Single Files  #
# # # # # # # # #
# If you want to simply look at a single output file, read.csv() is perfectly
# sufficient.

### Outputs
output <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/TROLL_0_outputs.txt", header = F)
### From Data
tree <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/TROLL_0_tree_from_data.txt", header = F)
liana <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/TROLL_0_liana_from_data.txt", header = F)
### Canopy Architecture 
tree_can <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/TROLL_0_tree_canopy_arc.txt", header = F)
liana_can <- read.csv("/Users/yourname/Documents/GradSchool/TROLL/TROLL_0_liana_canopy_arc.txt", header = F)

# Let's look at the data structure

### Outputs ###
# Outputs files are organized by output and species number. Species number is determined
# by the vertical order of plant species in your input file. The first column gives the 
# timestep. Subsequent columns give output metric by species, and the total across species.
# The code below shows how to generate quick reference plots for the total across species.
# As a reference, column 2 gives the number of trees >1cm per hectare for speccies 1,
# column 3 gives this for species 2, and so on.

  library('ggplot2')

  # dbh > 1cm per hectare
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,2+num_sp])) + 
    theme_classic() + xlab("month") + ylab("number of trees >1cm dbh per hectare")
  
  # dbh > 10cm per hectare
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,3+num_sp*2])) + 
    theme_classic() + xlab("month") + ylab("number of trees >10cm dbh per hectare")
  
  # dbh > 30cm per hectare
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,4+num_sp*3])) + 
    theme_classic() + xlab("month") + ylab("number of trees >30cm dbh per hectare")
  
  # total BA of trees > 10cm dbh
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,5+num_sp*4])) + 
    theme_classic() + xlab("month") + ylab("total BA of trees >10cm dbh [m^2]")
  
  # total NPP per timestep in MgC/ha
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,6+num_sp*5])) + 
    theme_classic() + xlab("month") + ylab("NPP per month [MgC/ha]")
  
  # total GPP per timestep in MgC/ha
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,7+num_sp*6])) + 
    theme_classic()+ xlab("month") + ylab("GPP per month [MgC/ha]")
  
  # total AGB per timestep in MgC/ha
  ggplot(data = output) + 
    geom_line(mapping = aes(x = output[,1], y = output[,8+num_sp*6])) + 
    theme_classic()+ xlab("month") + ylab("GPP per month [MgC/ha]")
    
### From Data ###
# From data files contain GPP, NPP, LA, h, CD, and CR data for each timestep,
# for plants initialized using the forestconfig.txt file.

colnames(tree) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
colnames(liana) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")

# There is a large variety of plots that can be easily generated from these files.

### Canopy Architecture ###
# Canopy arc files give month, vertical canopy layer, and LA

colnames(tree_can) <- c("month","layer","LA")
colnames(liana_can) <- c("month","layer","LA")


# Let's visualize a canopy for a single month of interet.
# First, we need to create a blank array

canopy <- array(dim = c(max(liana_can$layer+1),4,num_steps))

# and populate it...

# Read LA by layer by month into a 3D array 
for (i in 1:num_steps) {
  month <- which(liana_can$month == i)
  canopy[liana_can$layer[month]+1, ,i] <-liana_can$LA[month]
}

  ## Simple plot of a 1 month snapshot (month 100)
  # Reverse when plotting so layer 1 is on the bottom.
  # Change nrow = and ncol = to match the dimensions of canopy[x,y,]
  plot(matrix(nrow = 3, ncol = 4, rev(canopy[ , ,100])), ylab = "Canopy layer by meter", 
     xlab = NA, asp = T, axis.row = NULL, axis.col = NULL, main = "LA by canopy layer", 
     border = NA, key=list(side=4, cex.axis=0.75), fmt.key="%.4f",
     # Adjust breaks as needed for proper visualization
     breaks=c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5,1e-4,1e-3,1e-2,.1,.5))
  # Adjust axis ticks to match data
  axis(2, at = c(.5,1.5,2.5,3.5), labels = c(0,1,2,3))
  mtext(side = 3, "month 100")

# # # # # # # # # # # #
# Ensembles of files  #
# # # # # # # # # # # #
# You may want to read in an ensemble of simulations. It is preferable to use a
# nested list to keep your data organized, rather than have a series of objects 
# labeled tree1-tree500. The following code can be easily adapted to load in ensembles
# of files. This loop assumes your files are named such as ens_#_0_*.txt, in congruence
# with the Running_TROLL

ens <- list()
for (j in 1:num_ens) {
  # check that file isn't blank (plant died in 1st timestep)
  if (file.size(paste0("/Users/yourname/Documents/GradSchool/TROLL/ens_",j,"_0_liana_from_data.txt"))>0)
  {
    # import each run
    ens_liana_500[[j]] <- read.csv(paste0("/Users/yourname/Documents/GradSchool/TROLL/ens_",j,"_0_liana_from_data.txt"), 
                                   header = FALSE)
    # creating add columns
    colnames(ens_liana_500[[j]]) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
    ens_liana_500[[j]]$month <- seq.int(nrow(ens_liana_500[[j]]))
    ens_liana_500[[j]]$run <- j
  }
  # if file is blank, generate matrix of 0s
  else {ens_liana_500[[j]] <-  data.frame(matrix(data = 0, nrow = 1, ncol = 6))
  colnames(ens_liana_500[[j]]) <- c("GPP","NPP","LA","Height","Crown_Depth","Crown_Radius")
  ens_liana_500[[j]]$month <- seq.int(nrow(ens_liana_500[[j]]))
  ens_liana_500[[j]]$run <- j
  }
}
ens_liana_500 <- bind_rows(ens_liana_500) %>% group_by(month) %>% 
  summarize(across(c(GPP,NPP,LA,Height,Crown_Depth,Crown_Radius), 
                   list(mu = ~ mean(.), sigma = ~ std.error(.), n = ~ length(.))))



# # # # # # # # # # # #
# Canopy architecture #
# # # # # # # # # # # #
# TROLL outputs 2 comma separated files ending in liana_canopy_arc.txt and
# tree_canopy_arc.txt. These contain information on plants initialized from data.

library('dplyr')

num_ens <- 1 # Enter the number of runs in the ensemble
num_steps <- 120 # Enter the number of months modeled

# Read in an ensemble of canopy_arc.txt files
ens_liana <- list()
for (j in 1:num_ens) {
  # check that file isn't blank (liana died in 1st timestep)
  if (file.size(paste0("/Users/yourname/Documents/GradSchool/TROLL/canopy_arc/growth_strat/ens_",j,"_0_liana_canopy_arc.txt"))>0)
  {
    # import each run
    ens_liana[[j]] <- read.csv(paste0("/Users/yourname/Documents/GradSchool/TROLL/canopy_arc/growth_strat/ens_",j,"_0_liana_canopy_arc.txt"), 
                               header = FALSE)
    # creating add columns
    colnames(ens_liana[[j]]) <- c("month","layer","LA")
    ens_liana[[j]]$run <- j
  }
  # if file is blank, generate matrix of 0s
  else {ens_liana[[j]] <-  data.frame(matrix(data = 0, nrow = 1, ncol = 3))
  colnames(ens_liana[[j]]) <- c("month","layer","LA")
  ens_liana[[j]]$run <- j
  }
}
# SKIP NEXT STEP IF SINGLE RUN (num_ens = 1)
# Group by month and layer if ensemble. 
ens_liana <- bind_rows(ens_liana) %>% group_by(month, layer) %>% 
  summarize(across(c(LA),list(mu = ~ mean(.), sigma = ~ std.error(.), n = ~ length(.))))

# As dataframe
liana <- as.data.frame(ens_liana)

# Define the dimensions of your canopy. 
canopy <- array(dim = c(max(liana$layer+1),4,num_steps))

# Here the canopy width is set to 4 because my canopy depth was 3. 
# This was done for a pretty visualization. The canopy_arc.txt
# files only have LA by vertical layer, not horizontal.

# Read LA by layer by month into a 3D array 
for (i in 1:num_steps) {
  month <- which(liana$month == i)
  canopy[liana$layer[month]+1, ,i] <-liana$LA[month]
}

# You are ready to visualize

#################################
# STEP 4: Visualize and analyze #
#################################

# # # # # # # # # # # #
# Canopy architecture #
# # # # # # # # # # # #
# We can visualize how each of the different growth strategies distributes leaf
# area vertically in the canopy.

library('plot.matrix')
library('magick')

## Animated .gif of LAD change by vertical layer over time
# Set your working directory
setwd("/Users/yourname/Documents/GradSchool/TROLL/canopy_arc/growth_strat/images")

# Loop over canopy, generate and save a .png image of each timestep
for (i in 1:num_steps)  {
  par(mar = c(5.1, 4.1, 4.1, 3.1))
  
  png(paste0(file = "growth_strat_",i,".png"),width = 6, height = 4, res = 300, units = "in")
  
  plot(matrix(nrow = 3, ncol = 4, rev(canopy[ , ,i])), ylab = "Canopy layer by meter", 
     xlab = NA, asp = T, axis.row = NULL, axis.col = NULL, main = "LA by canopy layer", 
     border = NA, key=list(side=4, cex.axis=0.75), fmt.key="%.4f",
     # Adjust breaks as needed for proper visualization
     breaks=c(0,1e-10,1e-9,1e-8,1e-7,1e-6,1e-5,1e-4,1e-3,1e-2,.1,.5))
  # Adjust axis ticks to match data
  axis(2, at = c(.5,1.5,2.5,3.5),labels = c(0,1,2,3))
  
  mtext(side = 3, paste0("month ",i))
  
  dev.off()
}

# List file names and read in
imgs <- list.files(getwd(), full.names = T)
img_list <- lapply(imgs, image_read)

# Join the images together
img_joined <- image_join(img_list)

# Animate at 2 frames per second
img_animated <- image_animate(img_joined, fps = 2)

# View animated image
img_animated

# Save to disk
image_write(image = img_animated,
            path = "growth_strat.gif")

